/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package prog1;

import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JFileChooser;

/**
 * This class creates the GUI for a weather station application that charts
 * data that has been collected and formatted into XML files of a certain 
 * format. It allows the user to graph different data points over different
 * date ranges. The different data types to choose from are: temperature,
 * humidity, barometric pressure, wind speed, UV index, and rainfall.
 * 
 * @author Charles Parsons & Matt Dyke
 */
public class WeatherStationDataApp extends javax.swing.JFrame {

    /**
     * Creates new form WeatherStationDataApp
     */
    public WeatherStationDataApp() {
        //create AppDate objects
        beginDate = new AppDate();
        endDate = new AppDate();
        dateEntered = new AppDate();
        
        //create thermometer objects
        meanTempTherm = new org.jfree.chart.plot.JThermometer();
        highTempTherm = new org.jfree.chart.plot.JThermometer();
        lowTempTherm = new org.jfree.chart.plot.JThermometer();
        rainfallTherm = new org.jfree.chart.plot.JThermometer();
        
        initTherms();
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        radioButtonGroup = new javax.swing.ButtonGroup();
        fileChooser = new javax.swing.JFileChooser();
        chooseDateRangeLabel = new javax.swing.JLabel();
        beginDateTextField = new javax.swing.JTextField();
        beginDateLabel = new javax.swing.JLabel();
        dailyRadioButton = new javax.swing.JRadioButton();
        weeklyRadioButton = new javax.swing.JRadioButton();
        monthlyRadioButton = new javax.swing.JRadioButton();
        yearlyRadioButton = new javax.swing.JRadioButton();
        chooseGraphComboBox = new javax.swing.JComboBox<>();
        allDatesButton = new javax.swing.JRadioButton();
        statisticsSectionLabel = new javax.swing.JLabel();
        meanTempLabel = new javax.swing.JLabel();
        highTempLabel = new javax.swing.JLabel();
        lowTempLabel = new javax.swing.JLabel();
        meanWindSpeedLabel = new javax.swing.JLabel();
        prevailingWindDirectionLabel = new javax.swing.JLabel();
        rainfallLabel = new javax.swing.JLabel();
        meanTempValueLabel = new javax.swing.JLabel();
        highTempValueLabel = new javax.swing.JLabel();
        lowTempValueLabel = new javax.swing.JLabel();
        meanWindSpeedValueLabel = new javax.swing.JLabel();
        prevailingWindDirectionValueLabel = new javax.swing.JLabel();
        rainfallValueLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dialDisplayPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        graphDisplayPanel = new GraphPanel("Title");
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        appMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        quitMenuItem = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Directory Chooser");
        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1000, 600));

        chooseDateRangeLabel.setText("Choose Date:");

        beginDateTextField.setText(beginDate.toString());
        beginDateTextField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                beginDateTextFieldActionPerformed(evt);
            }
        });

        beginDateLabel.setText("Begin");

        radioButtonGroup.add(dailyRadioButton);
        dailyRadioButton.setText("Daily");
        dailyRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                dailyRadioButtonActionPerformed(evt);
            }
        });

        radioButtonGroup.add(weeklyRadioButton);
        weeklyRadioButton.setText("Weekly");
        weeklyRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                weeklyRadioButtonActionPerformed(evt);
            }
        });

        radioButtonGroup.add(monthlyRadioButton);
        monthlyRadioButton.setText("Monthly");
        monthlyRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                monthlyRadioButtonActionPerformed(evt);
            }
        });

        radioButtonGroup.add(yearlyRadioButton);
        yearlyRadioButton.setText("Yearly");
        yearlyRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                yearlyRadioButtonActionPerformed(evt);
            }
        });

        chooseGraphComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Temperature", "Humidity", "Barometric Pressure", "Wind Speed", "UV Index", "Rainfall" }));
        chooseGraphComboBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                chooseGraphComboBoxItemStateChanged(evt);
            }
        });
        chooseGraphComboBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chooseGraphComboBoxActionPerformed(evt);
            }
        });

        radioButtonGroup.add(allDatesButton);
        allDatesButton.setText("All Dates");
        allDatesButton.setSelected(true);
        allDatesButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                allDatesButtonActionPerformed(evt);
            }
        });

        statisticsSectionLabel.setText("Statistics:");

        meanTempLabel.setText("Mean Temp");

        highTempLabel.setText("High Temp");

        lowTempLabel.setText("Low Temp");

        meanWindSpeedLabel.setText("Mean Wind Speed");

        prevailingWindDirectionLabel.setText("Prevailing Wind Direction");

        rainfallLabel.setText("Rainfall");

        meanTempValueLabel.setText("N/A");

        highTempValueLabel.setText("N/A");

        lowTempValueLabel.setText("N/A");

        meanWindSpeedValueLabel.setText("N/A");

        prevailingWindDirectionValueLabel.setText("N/A");

        rainfallValueLabel.setText("N/A");

        dialDisplayPanel.setPreferredSize(new java.awt.Dimension(1, 1));
        dialDisplayPanel.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane1.setViewportView(dialDisplayPanel);
        dialDisplayPanel.add(highTempTherm);
        dialDisplayPanel.add(meanTempTherm);
        dialDisplayPanel.add(lowTempTherm);
        dialDisplayPanel.add(rainfallTherm);

        graphDisplayPanel.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane2.setViewportView(graphDisplayPanel);
        graphDisplayPanel.validate();

        prevButton.setText("Prev");
        prevButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                prevButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                nextButtonActionPerformed(evt);
            }
        });

        appMenuBar.setName("appMenuBar"); // NOI18N

        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);
        fileMenu.add(jSeparator1);

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                quitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitMenuItem);

        appMenuBar.add(fileMenu);

        aboutMenu.setText("About");

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aboutMenuItemActionPerformed(evt);
            }
        });
        aboutMenu.add(aboutMenuItem);

        appMenuBar.add(aboutMenu);

        setJMenuBar(appMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(chooseDateRangeLabel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(beginDateLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(beginDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(chooseGraphComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(allDatesButton)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(dailyRadioButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(weeklyRadioButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(monthlyRadioButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(yearlyRadioButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                                    .addComponent(statisticsSectionLabel)))
                            .addGap(20, 20, 20))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(rainfallLabel)
                                    .addGap(18, 18, 18)
                                    .addComponent(rainfallValueLabel))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(prevailingWindDirectionLabel)
                                    .addGap(18, 18, 18)
                                    .addComponent(prevailingWindDirectionValueLabel))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(meanWindSpeedLabel)
                                    .addGap(18, 18, 18)
                                    .addComponent(meanWindSpeedValueLabel))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lowTempLabel)
                                    .addGap(18, 18, 18)
                                    .addComponent(lowTempValueLabel))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(highTempLabel)
                                    .addGap(18, 18, 18)
                                    .addComponent(highTempValueLabel))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(meanTempLabel)
                                    .addGap(18, 18, 18)
                                    .addComponent(meanTempValueLabel)))
                            .addGap(10, 10, 10)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(prevButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nextButton)
                        .addGap(39, 39, 39))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dailyRadioButton, monthlyRadioButton, weeklyRadioButton, yearlyRadioButton});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {highTempLabel, lowTempLabel, meanTempLabel, meanWindSpeedLabel, prevailingWindDirectionLabel, rainfallLabel});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {highTempValueLabel, lowTempValueLabel, meanTempValueLabel, meanWindSpeedValueLabel, prevailingWindDirectionValueLabel, rainfallValueLabel});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {nextButton, prevButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chooseGraphComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(chooseDateRangeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(beginDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(beginDateLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(prevButton)
                            .addComponent(nextButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(dailyRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(weeklyRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monthlyRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yearlyRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(allDatesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 35, Short.MAX_VALUE)
                        .addComponent(statisticsSectionLabel)
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(meanTempLabel)
                            .addComponent(meanTempValueLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(highTempLabel)
                            .addComponent(highTempValueLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lowTempLabel)
                            .addComponent(lowTempValueLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(meanWindSpeedLabel)
                            .addComponent(meanWindSpeedValueLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(prevailingWindDirectionLabel)
                            .addComponent(prevailingWindDirectionValueLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rainfallLabel)
                            .addComponent(rainfallValueLabel)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {nextButton, prevButton});

        AllDatesButtonAction(null);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method tells the application to shutdown when the Quit menu option
     * is chosen from the File menu or when Ctrl + Q is pressed.
     * 
     * @param evt event triggered when the quit file menu option is clicked.
     */
    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        //exits the application
        System.exit(0);
    }//GEN-LAST:event_quitMenuItemActionPerformed

    /**
     * This method initializes the thermometer objects.
     */
    private void initTherms()
    {
        //set the ranges for the thermometer objects
        meanTempTherm.setRange(-30, 110);
        highTempTherm.setRange(-30, 110);
        lowTempTherm.setRange(-30, 110);
        rainfallTherm.setRange(0, 30);
        
        //set the titles for the thermometer objects
        meanTempTherm.addSubtitle("Mean Temp");
        highTempTherm.addSubtitle("High Temp");
        lowTempTherm.addSubtitle("Low Temp");
        rainfallTherm.addSubtitle("Rainfall");
        
        //set the thermometer color value for the mean temp value
        meanThermDisplayPanel = new javax.swing.JPanel();
        meanThermDisplayPanel.setPreferredSize(new java.awt.Dimension(1, 1));
        meanTempTherm.setPreferredSize(new java.awt.Dimension(1, 1));
        meanTempTherm.setUnits(1);
        meanThermDisplayPanel.add(meanTempTherm);
        
        //set the thermometer color value for the high temp value
        highThermDisplayPanel = new javax.swing.JPanel();
        highThermDisplayPanel.setPreferredSize(new java.awt.Dimension(1, 1));
        highTempTherm.setPreferredSize(new java.awt.Dimension(1, 1));
        highTempTherm.setUnits(1);
        highThermDisplayPanel.add(highTempTherm);
        
        //set the thermometer color value for the low temp value
        lowThermDisplayPanel = new javax.swing.JPanel();
        lowThermDisplayPanel.setPreferredSize(new java.awt.Dimension(1, 1));
        lowTempTherm.setPreferredSize(new java.awt.Dimension(1, 1));
        lowTempTherm.setUnits(1);
        lowThermDisplayPanel.add(lowTempTherm);
        
        //set the thermometer color value for the rainfall value
        rainfallDisplayPanel = new javax.swing.JPanel();
        rainfallDisplayPanel.setPreferredSize(new java.awt.Dimension(1, 1));
        rainfallTherm.setPreferredSize(new java.awt.Dimension(1, 1));
        rainfallTherm.setUnits(0);
        rainfallDisplayPanel.add(rainfallTherm);
    }
    
    /**
     * This method changes the date range for the graph to the entire month of
     * the date entered into the text field.
     * 
     * @param evt event triggered when the Monthly radio button is selected.
     */
    private void monthlyRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthlyRadioButtonActionPerformed
        MonthlyButtonAction( evt );
    }//GEN-LAST:event_monthlyRadioButtonActionPerformed

    /**
     * This method changes the date range for the graph to only show the data
     * for the date entered into the begin date text field.
     * 
     * @param evt event triggered when the Daily radio button is chosen.
     */
    private void dailyRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dailyRadioButtonActionPerformed
        DailyButtonAction( evt );
    }//GEN-LAST:event_dailyRadioButtonActionPerformed

    /**
     * This method changes the graph that is rendered based on the combo box
     * choice.
     * 
     * @param evt An event that is triggered when a combo box choice has been
     * made.
     */
    private void chooseGraphComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseGraphComboBoxActionPerformed
        //Get string telling which item was selected
        String selection = chooseGraphComboBox.getSelectedItem().toString();
        
        //display graph for Temperature
        if( selection == "Temperature" )
        {
            //Clear existing graph and render temperature graph
            ((GraphPanel)(graphDisplayPanel)).ClearGraph();
            ((GraphPanel)(graphDisplayPanel)).RenderTemperature();
        }
                
        //display graph for Humidity
        if( selection == "Humidity" )
        {
            //Clear existing graph and render humidity graph
            ((GraphPanel)(graphDisplayPanel)).ClearGraph();
            ((GraphPanel)(graphDisplayPanel)).RenderHumidity();
        }

        //display graph for Barometric Pressure
        if( selection == "Barometric Pressure" )
        {
            //Clear existing graph and render pressure graph
            ((GraphPanel)(graphDisplayPanel)).ClearGraph();
            ((GraphPanel)(graphDisplayPanel)).RenderPressure();
        }

        //display graph for Wind Speed
        if( selection == "Wind Speed" )
        {
            //Clear existing graph and render wind speed graph
            ((GraphPanel)(graphDisplayPanel)).ClearGraph();
            ((GraphPanel)(graphDisplayPanel)).RenderWindSpeed();
        }

        //display graph for UV Index
        if( selection == "UV Index" )
        {
            //Clear existing graph and render UV index graph
            ((GraphPanel)(graphDisplayPanel)).ClearGraph();
            ((GraphPanel)(graphDisplayPanel)).RenderUVIndex();
        }

        //display graph for Rainfall
        if( selection == "Rainfall" )
        {
            //Clear existing graph and render rainfall graph
            ((GraphPanel)(graphDisplayPanel)).ClearGraph();
            ((GraphPanel)(graphDisplayPanel)).RenderRainfall();
        }
    }//GEN-LAST:event_chooseGraphComboBoxActionPerformed

    /**
     * This method is triggered when the user has entered a date into the text
     * field on the GUI. It checks to make sure that a valid date has been
     * entered, but does not check to see if there is data for this date. It 
     * then sets the date entered variable to hold this date and has the new
     * date visible in the text field.
     * 
     * @param evt event triggered when a user has entered a date into the text
     * field on the GUI.
     */
    private void beginDateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beginDateTextFieldActionPerformed
        //get the value entered into the beginDateTextField
        String textField = beginDateTextField.getText();
        int m, d, y; //month, day, year
        boolean isValid = false; //flag for date checking
        
        //parse the textField string to get the month, day, and year components
        //save those components into the beginDate object
        String [] parsed = textField.split("/");
        //store the values in a temporary variable while error checking
        m = Integer.parseInt(parsed[0]);
        d = Integer.parseInt(parsed[1]);
        y = Integer.parseInt(parsed[2]);
        
        //checks for valid month and day
        switch(m)
        {
            case 1:
            case 3:
            case 5:
            case 7:
            case 8:
            case 10:
            case 12:
                if(d > 0 && d <= 31)
                {
                    isValid = true; 
                }
                break;
            case 4:
            case 6:
            case 9:
            case 11:
                if(d > 0 && d <= 30)
                {
                    isValid = true;
                }
                break;
            case 2:
                //check if year is not a leap year
                if(y % 4 !=0 || (y % 400 != 0 && y % 100 == 0))
                {
                    if(d > 0 && d <= 28)
                    {
                        isValid = true;
                    }
                }
                else
                {
                    if(d > 0 && d <=29)
                    {
                        isValid = true;
                    }
                }
                break;           
        }
        //if a valid date has been entered, set the dateEntered variable
        if(isValid == true)
        {
            dateEntered.setMonth(m);
            dateEntered.setDay(d);
            dateEntered.setYear(y);
        }
        //display the date that was entered by the user
        beginDateTextField.setText(dateEntered.toString());
        
        //If daily radio button is selected
        if( dailyRadioButton.isSelected() )
        {
            //Call same code as if daily radio button was pushed
            DailyButtonAction( null );
        }
        //If weekly radio button is selected
        if( weeklyRadioButton.isSelected() )
        {
            //Call same code as if weekly radio button was pushed
            WeeklyButtonAction( null );
        }
        //If montly radio button is selected
        if( monthlyRadioButton.isSelected() )
        {
            //Call same code as if monthly radio button was pushed
            MonthlyButtonAction( null );
        }
        //If yearly radio button is selected
        if( yearlyRadioButton.isSelected() )
        {
            //Call same code as if yearly radio button was pushed
            YearlyButtonAction( null );
        }
        //If all dates radio button is selected
        if( allDatesButton.isSelected() )
        {
            //Call same code as if all dates radio button was pushed
            AllDatesButtonAction( null );
        }
    }//GEN-LAST:event_beginDateTextFieldActionPerformed

    /**
     * This method sets the date range for the graph to a seven day range with
     * the date entered as the start date.
     * 
     * @param evt event triggered when the Weekly radio button is chosen.
     */
    private void weeklyRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weeklyRadioButtonActionPerformed
        WeeklyButtonAction( evt );
    }//GEN-LAST:event_weeklyRadioButtonActionPerformed

    /**
     * This method sets the date range for the graph to the calendar year that
     * includes the date entered by the user.
     * 
     * @param evt event triggered when the Yearly radio button is chosen.
     */
    private void yearlyRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearlyRadioButtonActionPerformed
        YearlyButtonAction( evt );
    }//GEN-LAST:event_yearlyRadioButtonActionPerformed

    /**
     * This method calls the file chooser when the open menu item is chosen.
     * 
     * @param evt Event triggered when the open menu item is chosen.
     */
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_openMenuItemActionPerformed
    {//GEN-HEADEREND:event_openMenuItemActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);   //How chooser closed
        
        //If user selected a directory
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            //Call XMLParse to parse data files in selected directory
            XMLParse.parseFiles( fileChooser.getSelectedFile().getAbsolutePath() );
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    /**
     * 
     * @param evt 
     */
    private void chooseGraphComboBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_chooseGraphComboBoxItemStateChanged
    {//GEN-HEADEREND:event_chooseGraphComboBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_chooseGraphComboBoxItemStateChanged

    /**
     * This method performs an action when the all dates radio button is chosen.
     * 
     * @param evt Event triggered when the all dates radio button is chosen.
     */
    private void allDatesButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_allDatesButtonActionPerformed
    {//GEN-HEADEREND:event_allDatesButtonActionPerformed
        AllDatesButtonAction( evt );
    }//GEN-LAST:event_allDatesButtonActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_prevButtonActionPerformed
    {//GEN-HEADEREND:event_prevButtonActionPerformed
        //Set up calendar with selected date
        Calendar cal = Calendar.getInstance();
        cal.set( dateEntered.getYear(), dateEntered.getMonth(), dateEntered.getDay() );        
        
        //If daily radio button is selected
        if( dailyRadioButton.isSelected() )
        {            
            //Set calendar back one day
            cal.add( Calendar.DATE, -1 );
            
            //Save new date as user input
            dateEntered.setDay( cal.get( cal.DATE ) );
            dateEntered.setMonth( cal.get( cal.MONTH ) );
            dateEntered.setYear( cal.get( cal.YEAR ) );
            if( dateEntered.getMonth() == 0 )
            {
                dateEntered.setMonth( 12 );
                dateEntered.setYear(  dateEntered.getYear() - 1 );
            }
            
            //Call same code as if daily radio button was pushed
            DailyButtonAction( null );
        }
        //If weekly radio button is selected
        if( weeklyRadioButton.isSelected() )
        {            
            //Set calendar back one week
            cal.add( Calendar.DATE, -7 );
            
            //Save new date as user input
            dateEntered.setDay( cal.get( cal.DATE ) );
            dateEntered.setMonth( cal.get( cal.MONTH ) );
            dateEntered.setYear( cal.get( cal.YEAR ) );
            if( dateEntered.getMonth() == 0 )
            {
                dateEntered.setMonth( 12 );
                dateEntered.setYear(  dateEntered.getYear() - 1 );
            }
            
            //Call same code as if weekly radio button was pushed
            WeeklyButtonAction( null );
        }
        //If montly radio button is selected
        if( monthlyRadioButton.isSelected() )
        {            
            //Set calendar back one month
            cal.add( Calendar.DATE, -30 );
            
            //Save new date as user input
            dateEntered.setDay( cal.get( cal.DATE ) );
            dateEntered.setMonth( cal.get( cal.MONTH ) );
            dateEntered.setYear( cal.get( cal.YEAR ) );
            if( dateEntered.getMonth() == 0 )
            {
                dateEntered.setMonth( 12 );
                dateEntered.setYear(  dateEntered.getYear() - 1 );
            }
            
            //Call same code as if monthly radio button was pushed
            MonthlyButtonAction( null );
        }
        //If yearly radio button is selected
        if( yearlyRadioButton.isSelected() )
        {            
            //Set calendar back one year
            cal.add( Calendar.DATE, -365 );
            
            //Save new date as user input
            dateEntered.setDay( cal.get( cal.DATE ) );
            dateEntered.setMonth( cal.get( cal.MONTH ) );
            dateEntered.setYear( cal.get( cal.YEAR ) );    
            if( dateEntered.getMonth() == 0 )
            {
                dateEntered.setMonth( 12 );
                dateEntered.setYear(  dateEntered.getYear() - 1 );
            }        
            
            //Call same code as if yearly radio button was pushed
            YearlyButtonAction( null );
        }
        
        cal.clear();
    }//GEN-LAST:event_prevButtonActionPerformed

    /**
     * This method opens a message dialog when the About menu item is chosen.
     * 
     * @param evt Event triggered by about menu item being chosen.
     */
    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        javax.swing.JOptionPane.showMessageDialog(rootPane, "Created by Matt Dyke and Charles Parsons.");
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_nextButtonActionPerformed
    {//GEN-HEADEREND:event_nextButtonActionPerformed
        //Set up calendar with selected date
        Calendar cal = Calendar.getInstance();
        cal.set( dateEntered.getYear(), dateEntered.getMonth(), dateEntered.getDay() );        
        
        //If daily radio button is selected
        if( dailyRadioButton.isSelected() )
        {            
            //Set calendar back one day
            cal.add( Calendar.DATE, 1 );
            
            //Save new date as user input
            dateEntered.setDay( cal.get( cal.DATE ) );
            dateEntered.setMonth( cal.get( cal.MONTH ) );
            dateEntered.setYear( cal.get( cal.YEAR ) );
            if( dateEntered.getMonth() == 0 )
            {
                dateEntered.setMonth( 12 );
                dateEntered.setYear(  dateEntered.getYear() - 1 );
            }
            
            //Call same code as if daily radio button was pushed
            DailyButtonAction( null );
        }
        //If weekly radio button is selected
        if( weeklyRadioButton.isSelected() )
        {            
            //Set calendar back one week
            cal.add( Calendar.DATE, 7 );
            
            //Save new date as user input
            dateEntered.setDay( cal.get( cal.DATE ) );
            dateEntered.setMonth( cal.get( cal.MONTH ) );
            dateEntered.setYear( cal.get( cal.YEAR ) );
            if( dateEntered.getMonth() == 0 )
            {
                dateEntered.setMonth( 12 );
                dateEntered.setYear(  dateEntered.getYear() - 1 );
            }
            
            //Call same code as if weekly radio button was pushed
            WeeklyButtonAction( null );
        }
        //If montly radio button is selected
        if( monthlyRadioButton.isSelected() )
        {            
            //Set calendar back one month
            cal.add( Calendar.DATE, 30 );
            
            //Save new date as user input
            dateEntered.setDay( cal.get( cal.DATE ) );
            dateEntered.setMonth( cal.get( cal.MONTH ) );
            dateEntered.setYear( cal.get( cal.YEAR ) );
            if( dateEntered.getMonth() == 0 )
            {
                dateEntered.setMonth( 12 );
                dateEntered.setYear(  dateEntered.getYear() - 1 );
            }
            
            //Call same code as if monthly radio button was pushed
            MonthlyButtonAction( null );
        }
        //If yearly radio button is selected
        if( yearlyRadioButton.isSelected() )
        {            
            //Set calendar back one year
            cal.add( Calendar.DATE, 365 );
            
            //Save new date as user input
            dateEntered.setDay( cal.get( cal.DATE ) );
            dateEntered.setMonth( cal.get( cal.MONTH ) );
            dateEntered.setYear( cal.get( cal.YEAR ) );    
            if( dateEntered.getMonth() == 0 )
            {
                dateEntered.setMonth( 12 );
                dateEntered.setYear(  dateEntered.getYear() - 1 );
            }        
            
            //Call same code as if yearly radio button was pushed
            YearlyButtonAction( null );
        }
        
        cal.clear();
    }//GEN-LAST:event_nextButtonActionPerformed

    /**
     * This method updates the statistics show in the labels and thermometers
     * when given set of statistics.
     * 
     * @param wStats The statistics to be displayed.
     */
    private void updateStatsShown(WeatherStats wStats)
    {
        if(wStats.highTemp < -500)
        {
            resetStatLabels();
            return;
        }
        //update the thermometers
        meanTempTherm.setValue(wStats.avgTemp);
        highTempTherm.setValue(wStats.highTemp);
        lowTempTherm.setValue(wStats.lowTemp);
        rainfallTherm.setValue(wStats.totalRainFall);
        
        //update the labels
        meanTempValueLabel.setText(((Double)wStats.avgTemp).toString());
        highTempValueLabel.setText(((Double)wStats.highTemp).toString() + " at " +
                  ((Integer)wStats.highTempHour).toString() + ":" +
                   ((Integer)wStats.highTempMinute).toString() + " on " + 
                    ((Integer)wStats.highTempMonth) + "/" +
                    ((Integer)wStats.highTempDay) + "/" +
                    ((Integer)wStats.highTempYear));
        lowTempValueLabel.setText(((Double)wStats.lowTemp).toString() + " at " +
                  ((Integer)wStats.lowTempHour).toString() + ":" +
                   ((Integer)wStats.lowTempMinute).toString() + " on " + 
                    ((Integer)wStats.lowTempMonth) + "/" +
                    ((Integer)wStats.lowTempDay) + "/" +
                    ((Integer)wStats.lowTempYear));
        meanWindSpeedValueLabel.setText(((Double)wStats.avgWindSpeed).toString());
        prevailingWindDirectionValueLabel.setText(wStats.prevailingWindDirection);
        rainfallValueLabel.setText(((Double)wStats.totalRainFall).toString());
    }
    
    
    /**
     * This method resets the statistics labels to their initial values.
     * It is used when there is no statistics data for the desired date range.
     */
    public void resetStatLabels()
    {
        meanTempValueLabel.setText("N/A");
        highTempValueLabel.setText("N/A");
        lowTempValueLabel.setText("N/A");
        meanWindSpeedValueLabel.setText("N/A");
        prevailingWindDirectionValueLabel.setText("N/A");
        rainfallValueLabel.setText("N/A");
    }
    /**
     * This method updates the statistics and graph when the daily radio
     * button is chosen.
     * 
     * @param evt Event triggered when the daily radio button is chosen.
     */
    public void DailyButtonAction(java.awt.event.ActionEvent evt)
    {
        //set the begin date to the date that was entered by the user
        beginDate.setMonth(dateEntered.getMonth());
        beginDate.setDay(dateEntered.getDay());
        beginDate.setYear(dateEntered.getYear());
        //set the end date to the date that was entered by the user
        endDate.setMonth(dateEntered.getMonth());
        endDate.setDay(dateEntered.getDay());
        endDate.setYear(dateEntered.getYear());
        
        //set the display text in the text field to the date entered by the user
        beginDateTextField.setText(dateEntered.toString());
        
                //update the statistics shown on the GUI
        DailyStats dStats = StatisticsUpdate.getDailyStats(beginDate.getMonth(), 
                beginDate.getDay(), beginDate.getYear());
        updateStatsShown(dStats);
        
        //Create datasets
        ArrayList<WeatherReading> day = XMLParse.GetDailyReadings( beginDate );
        ((GraphPanel)(graphDisplayPanel)).createDailyDatasets( day );
        
        //Clear old graph
        ((GraphPanel)(graphDisplayPanel)).ClearGraph();
        
        //Build new graph
        RenderGraph( chooseGraphComboBox.getSelectedItem().toString() );
    }
    
    /**
     * This method updates the statistics and graph when the weekly radio
     * button is chosen.
     * 
     * @param evt Event triggered when the weekly radio button is chosen.
     */
    public void WeeklyButtonAction(java.awt.event.ActionEvent evt)
    {
        //set the end date to be 7 days after the begin date
        beginDate.setMonth(dateEntered.getMonth());
        beginDate.setDay(dateEntered.getDay());
        beginDate.setYear(dateEntered.getYear());
        
        switch(beginDate.getMonth())
        {
            //begin date is in a month with 31 days total, but is not December
            case 1:
            case 3:
            case 5:
            case 7:
            case 8:
            case 10:
                if(beginDate.getDay() > 25)
                {
                    endDate.setMonth(beginDate.getMonth() + 1);
                    endDate.setDay(6 - (31 - beginDate.getDay()));
                }
                else
                {
                    endDate.setMonth(beginDate.getMonth());
                    endDate.setDay(beginDate.getDay() + 6);
                }
                endDate.setYear(beginDate.getYear());
                break;
            //begin date is in a month with 30 days total
            case 4:
            case 6:
            case 9:
            case 11:
                if(beginDate.getDay() > 24)
                {
                    endDate.setMonth(beginDate.getMonth() + 1);
                    endDate.setDay(6 - (30 - beginDate.getDay()));
                }
                else
                {
                    endDate.setMonth(beginDate.getMonth());
                    endDate.setDay(beginDate.getDay() + 6);
                }
                endDate.setYear(beginDate.getYear());
                break;
            //begin date is in February, must account for leap years
            case 2:
                if((beginDate.getDay() > 22) && ((beginDate.getYear() % 4 != 0)
                        || (beginDate.getYear() % 400 != 0 
                        &&  beginDate.getYear() % 100 == 0)))
                {
                    endDate.setMonth(beginDate.getMonth() + 1);
                    endDate.setDay(6 - (28 - beginDate.getDay()));
                }
                else if(beginDate.getDay() > 23)
                {
                    endDate.setMonth(beginDate.getMonth() + 1);
                    endDate.setDay(6 - (29 - beginDate.getDay()));
                }
                else
                {
                    endDate.setMonth(beginDate.getMonth());
                    endDate.setDay(beginDate.getDay() + 6);
                }
                endDate.setYear(beginDate.getYear());
                break;
            //begin date is in December
            case 12:
                if(beginDate.getDay() > 25)
                {
                    endDate.setMonth(1);
                    endDate.setDay(6 - (31 - beginDate.getDay()));
                    endDate.setYear(beginDate.getYear() + 1);
                }
                else
                {
                    endDate.setMonth(beginDate.getMonth());
                    endDate.setDay(beginDate.getDay() + 6);
                    endDate.setYear(beginDate.getYear());
                }
                break;    
        }
        //set the display text in the text field to the date entered by the user
        beginDateTextField.setText(dateEntered.toString());
        
        //update weekly stats
        WeatherStats wStats = StatisticsUpdate.getCustomStats(beginDate, endDate);
        updateStatsShown(wStats);
        
        //Create datasets
        ArrayList<DailyStats> period = XMLParse.GetDailyAggregatePeriod( beginDate, endDate );
        ((GraphPanel)(graphDisplayPanel)).createNonDailyDatasets( period );
        
        //Clear old graph
        ((GraphPanel)(graphDisplayPanel)).ClearGraph();
        
        //Build new graph
        RenderGraph( chooseGraphComboBox.getSelectedItem().toString() );
    }

    /**
     * This method updates the statistics and graph when the monthly radio
     * button is chosen.
     * 
     * @param evt Event triggered when the monthly radio button is chosen.
     */
    public void MonthlyButtonAction(java.awt.event.ActionEvent evt)
    {
        //set the begin date to the date that was entered by the user
        beginDate.setMonth(dateEntered.getMonth());
        beginDate.setDay(dateEntered.getDay());
        beginDate.setYear(dateEntered.getYear());
        
        endDate.setMonth(beginDate.getMonth() + 1);
        endDate.setDay(beginDate.getDay() + 30);
        endDate.setYear(beginDate.getYear());
        
        switch(dateEntered.getMonth())
        {
            //January
            case 1:
                endDate.setDay( endDate.getDay() - 31 );
                
                if( endDate.getDay() > 28 )
                {
                    endDate.setDay( endDate.getDay() - 28 );
                    endDate.setMonth( 3 );
                }
                break;
            //February
            case 2:
                endDate.setDay( endDate.getDay() - 28 );
                break;
            //March
            case 3:
                endDate.setDay( endDate.getDay() - 31 );
                break;
            //April
            case 4:
                endDate.setDay( endDate.getDay() - 30 );
                break;
            //May
            case 5:
                endDate.setDay( endDate.getDay() - 31 );
                break;
            //June
            case 6:
                endDate.setDay( endDate.getDay() - 30 );
                break;
            //July
            case 7:
                endDate.setDay( endDate.getDay() - 31 );
                break;
            //August
            case 8:
                endDate.setDay( endDate.getDay() - 31 );
                break;
            //September
            case 9:
                endDate.setDay( endDate.getDay() - 30 );
                break;
            //October
            case 10:
                endDate.setDay( endDate.getDay() - 31 );
                break;
            //November
            case 11:
                endDate.setDay( endDate.getDay() - 30 );
                break;
            //December
            case 12:
                endDate.setDay( endDate.getDay() - 31 );
                endDate.setMonth( 1 );
                endDate.setYear( endDate.getYear() + 1 );
                break;
        }
        //set the visible text in the text field to the date entered by the user
        beginDateTextField.setText(dateEntered.toString());
        
        //update the statistics shown on the GUI
        MonthlyStats mStats = StatisticsUpdate.getMonthlyStats(beginDate.getMonth(), 
                beginDate.getYear());
        updateStatsShown(mStats);
        
        //Create datasets
        ArrayList<DailyStats> period = XMLParse.GetDailyAggregatePeriod( beginDate, endDate );
        ((GraphPanel)(graphDisplayPanel)).createNonDailyDatasets( period );
        
        //Clear old graph
        ((GraphPanel)(graphDisplayPanel)).ClearGraph();
        
        //Build new graph
        RenderGraph( chooseGraphComboBox.getSelectedItem().toString() );
    }
    
    /**
     * This method updates the statistics and graph when the yearly radio
     * button is chosen.
     * 
     * @param evt Event triggered when the yearly radio button is chosen.
     */
    public void YearlyButtonAction(java.awt.event.ActionEvent evt)
    {
        //set the begin date to the date that was entered by the user
        beginDate.setMonth(dateEntered.getMonth());
        beginDate.setDay(dateEntered.getDay());
        beginDate.setYear(dateEntered.getYear());
        
        //Set end date one year later
        endDate.setDay( dateEntered.getDay() );
        endDate.setMonth( dateEntered.getMonth() );
        endDate.setYear( dateEntered.getYear() + 1 );
        
        //set the display text in the text field to the date entered by the user
        beginDateTextField.setText(dateEntered.toString());
        
        //update the statistics shown on the GUI
        YearlyStats yStats = StatisticsUpdate.getYearlyStats(beginDate.getYear());
        updateStatsShown(yStats);
        
        //Create datasets
        ArrayList<DailyStats> period = XMLParse.GetDailyAggregatePeriod( beginDate, endDate );
        ((GraphPanel)(graphDisplayPanel)).createNonDailyDatasets( period );
        
        //Clear old graph
        ((GraphPanel)(graphDisplayPanel)).ClearGraph();
        
        //Build new graph
        RenderGraph( chooseGraphComboBox.getSelectedItem().toString() );
    }
    
    /**
     * This method updates the statistics and graph when the all dates radio
     * button is chosen.
     * 
     * @param evt Event triggered when the all dates radio button is chosen.
     */
    public void AllDatesButtonAction(java.awt.event.ActionEvent evt)
    {
        //set the begin date to the date that was entered by the user
        beginDate.setMonth(dateEntered.getMonth());
        beginDate.setDay(dateEntered.getDay());
        beginDate.setYear(dateEntered.getYear());
        
        //Set end date beyond feasible date
        endDate.setDay( XMLParse.weatherReadings.get(XMLParse.weatherReadings.size() - 1).get(0).day );
        endDate.setMonth( XMLParse.weatherReadings.get(XMLParse.weatherReadings.size() - 1).get(0).month );
        endDate.setYear( XMLParse.weatherReadings.get(XMLParse.weatherReadings.size() - 1).get(0).year );
        
        //update the statistics shown on the GUI
        WeatherStats wStats = StatisticsUpdate.getCustomStats(beginDate, endDate);
        updateStatsShown(wStats);
        
        //Create datasets
        ArrayList<DailyStats> period = XMLParse.GetDailyAggregatePeriod( beginDate, endDate );
        ((GraphPanel)(graphDisplayPanel)).createNonDailyDatasets( period );
        
        //Clear old graph
        ((GraphPanel)(graphDisplayPanel)).ClearGraph();
        
        //Build new graph
        RenderGraph( chooseGraphComboBox.getSelectedItem().toString() );
        
    }
    
    /**
     * This method renders the graph after a combo box item is chosen.
     * 
     * @param graphType The string representing the combo box choice.
     */
    public void RenderGraph( String graphType )
    {
        //If graph type is temperature
        if( graphType == "Temperature" )
        {
            ((GraphPanel)(graphDisplayPanel)).RenderTemperature();
        }
        //If graph type is humidity
        if( graphType == "Humidity" )
        {
            ((GraphPanel)(graphDisplayPanel)).RenderHumidity();
        }
        //If graph type is pressure
        if( graphType == "Barometric Pressure" )
        {
            ((GraphPanel)(graphDisplayPanel)).RenderPressure();
        }
        //If graph type is wind speed
        if( graphType == "Wind Speed" )
        {
            ((GraphPanel)(graphDisplayPanel)).RenderWindSpeed();
        }
        //If graph type is UV Index
        if( graphType == "UV Index" )
        {
            ((GraphPanel)(graphDisplayPanel)).RenderUVIndex();
        }
        //If graph type is rainfall
        if( graphType == "Rainfall" )
        {
            ((GraphPanel)(graphDisplayPanel)).RenderRainfall();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WeatherStationDataApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WeatherStationDataApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WeatherStationDataApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WeatherStationDataApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //Parse file
        XMLParse.parseFiles( XMLParse.getWorkingDirectory() );

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WeatherStationDataApp().setVisible(true);
            }
        });
    }
    

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JRadioButton allDatesButton;
    private javax.swing.JMenuBar appMenuBar;
    private javax.swing.JLabel beginDateLabel;
    private javax.swing.JTextField beginDateTextField;
    private javax.swing.JLabel chooseDateRangeLabel;
    private javax.swing.JComboBox<String> chooseGraphComboBox;
    private javax.swing.JRadioButton dailyRadioButton;
    private javax.swing.JPanel dialDisplayPanel;
    private javax.swing.JPanel meanThermDisplayPanel;
    private javax.swing.JPanel highThermDisplayPanel;
    private javax.swing.JPanel lowThermDisplayPanel;
    private javax.swing.JPanel rainfallDisplayPanel;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel graphDisplayPanel;
    private javax.swing.JLabel highTempLabel;
    private javax.swing.JLabel highTempValueLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lowTempLabel;
    private javax.swing.JLabel lowTempValueLabel;
    private javax.swing.JLabel meanTempLabel;
    private javax.swing.JLabel meanTempValueLabel;
    private javax.swing.JLabel meanWindSpeedLabel;
    private javax.swing.JLabel meanWindSpeedValueLabel;
    private javax.swing.JRadioButton monthlyRadioButton;
    private javax.swing.JButton nextButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JButton prevButton;
    private javax.swing.JLabel prevailingWindDirectionLabel;
    private javax.swing.JLabel prevailingWindDirectionValueLabel;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.ButtonGroup radioButtonGroup;
    private javax.swing.JLabel rainfallLabel;
    private javax.swing.JLabel rainfallValueLabel;
    private javax.swing.JLabel statisticsSectionLabel;
    private javax.swing.JRadioButton weeklyRadioButton;
    private javax.swing.JRadioButton yearlyRadioButton;
    // End of variables declaration//GEN-END:variables
    //Non-generated variable declation
    private AppDate beginDate; //used by the graph
    private AppDate endDate; //used by the graph
    private AppDate dateEntered; //entered by the user in the text field
    
    //used to show statistics visually
    private org.jfree.chart.plot.JThermometer meanTempTherm;
    private org.jfree.chart.plot.JThermometer highTempTherm;
    private org.jfree.chart.plot.JThermometer lowTempTherm;
    private org.jfree.chart.plot.JThermometer rainfallTherm;
    //End of non-generated variable declaration
}
